// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

contract EventOrganizingContract{
    struct Events{
        address organizer;
        string name;
        uint date;
        uint prices;
        uint ticketCount;
        uint ticketRemaining;

    }

    mapping (uint => Events) public events;
    mapping (address => mapping (uint=>uint)) public tickets;
    uint public nextid;

    function createEvent(string memory name,uint date,uint prices, uint ticketCount) public {
        require(date>block.timestamp,"YOU CAN ONLY ORGANIZE EVENT FOR FUTURE");
        require(ticketCount>0,"You have more than 0 tickets for the event");

        events[nextid] = Events(msg.sender,name,date,prices,ticketCount,ticketCount);
        nextid++;
    }
    function buyTickets(uint id,uint quantity) external payable {
        require(events[id].date != 0,"Event doesnot exist");
        require(events[id].date>block.timestamp,"Event already occured");
        Events storage _events = events[id];
        require(msg.value == (_events.prices*quantity),"You have insufficient balance");
        events[id].ticketRemaining-= quantity;
        tickets[msg.sender][id] += quantity;

    }

    function transferTicket(uint id,uint quantity,address to) external {
        require(events[id].date != 0,"Event doesnot exist");
        require(events[id].date>block.timestamp,"Event already occured");
        require(tickets[msg.sender][id] >= quantity,"You dont have enough tickets");

        tickets[msg.sender][id] -= quantity;
        tickets[to][id] += quantity;

    }
}
